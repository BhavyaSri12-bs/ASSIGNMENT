`timescale 1ns/1ps
module safe_alu (
    input  wire [7:0] a,
    input  wire [7:0] b,
    input  wire [1:0] opcode,   // 00=ADD, 01=SUB, 10=AND, 11=OR
    output reg  [7:0] result,
    output reg        zero,
    output reg        carry,
    output reg        overflow
);

    reg [8:0] temp;  // extra bit for carry in add/sub

    always @(*) begin
        carry    = 0;
        overflow = 0;
        result   = 8'd0;

        case (opcode)
            2'b00: begin // ADD
                temp    = a + b;
                result  = temp[7:0];
                carry   = temp[8];
                // Overflow if signs of a and b same but different from result
                overflow = (~(a[7] ^ b[7])) & (result[7] ^ a[7]);
            end

            2'b01: begin // SUB (a - b)
                temp    = a - b;
                result  = temp[7:0];
                carry   = ~temp[8]; // borrow flag (1 = no borrow)
                overflow = (a[7] ^ b[7]) & (result[7] ^ a[7]);
            end

            2'b10: begin // AND
                result  = a & b;
            end

            2'b11: begin // OR
                result  = a | b;
            end
        endcase

        zero = (result == 8'd0);
    end

endmodule
