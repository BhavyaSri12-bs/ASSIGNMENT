`timescale 1ns/1ps
module tb_byte_streamer;

    reg clk;
    reg rst;
    reg shift_enable;
    reg serial_in;
    wire [7:0] parallel_out;
    wire data_valid;

    // Instantiate DUT
    byte_streamer dut (
        .clk(clk),
        .rst(rst),
        .shift_enable(shift_enable),
        .serial_in(serial_in),
        .parallel_out(parallel_out),
        .data_valid(data_valid)
    );

    // Clock generator: 10ns period
    initial clk = 0;
    always #5 clk = ~clk;

    // Task to send one byte serially (MSB first)
    task send_byte(input [7:0] data);
        integer i;
        begin
            for (i = 7; i >= 0; i = i - 1) begin
                serial_in = data[i];
                shift_enable = 1;
                #10;
            end
            shift_enable = 0; // idle
            #10;
        end
    endtask

    initial begin
        $dumpfile("byte_streamer.vcd");
        $dumpvars(0, tb_byte_streamer);

        $monitor("Time=%0t | serial_in=%b | parallel_out=%b | data_valid=%b",
                 $time, serial_in, parallel_out, data_valid);

        // Reset
        rst = 1; shift_enable = 0; serial_in = 0;
        #12 rst = 0;

        // Send 0xA5 = 10100101
        send_byte(8'hA5);

        // Send 0x3C = 00111100
        send_byte(8'h3C);

        // Another byte 0xFF
        send_byte(8'hFF);

        #50 $finish;
    end

endmodule

